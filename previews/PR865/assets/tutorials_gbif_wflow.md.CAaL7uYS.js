import{_ as a,c as i,ai as e,o as n}from"./chunks/framework.DFAlnjdJ.js";const k=JSON.parse('{"title":"Species distribution modelling workflow","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/gbif_wflow.md","filePath":"tutorials/gbif_wflow.md","lastUpdated":null}'),t={name:"tutorials/gbif_wflow.md"};function l(p,s,o,r,h,c){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="Species-distribution-modelling-workflow" tabindex="-1">Species distribution modelling workflow <a class="header-anchor" href="#Species-distribution-modelling-workflow" aria-label="Permalink to &quot;Species distribution modelling workflow {#Species-distribution-modelling-workflow}&quot;">​</a></h1><p>This example shows a full Species distribution modelling workflow, from loading data, to cleaning it, to fitting an ensemble and generating predictions.</p><p>It uses GBIF and WorldClim data, which are common datasets in ecology. We&#39;ll load occurrences for the Mountain Pygmy Possum species using <a href="https://github.com/rafaqz/GBIF2.jl" target="_blank" rel="noreferrer">GBIF2.jl</a>, an interface to the <a href="https://www.gbif.org/" target="_blank" rel="noreferrer">Global Biodiversity Information Facility</a>, and extract environmental variables using BioClim data from <a href="https://github.com/EcoJulia/RasterDataSources.jl" target="_blank" rel="noreferrer">RasterDataSources.jl</a>.</p><h2 id="Load-Rasters,-ArchGDAL,-RasterDataSources-and-GBIF" tabindex="-1">Load Rasters, ArchGDAL, RasterDataSources and GBIF <a class="header-anchor" href="#Load-Rasters,-ArchGDAL,-RasterDataSources-and-GBIF" aria-label="Permalink to &quot;Load Rasters, ArchGDAL, RasterDataSources and GBIF {#Load-Rasters,-ArchGDAL,-RasterDataSources-and-GBIF}&quot;">​</a></h2><p>The GBIF2 library is used to download occurrence data, RasterDataSources to conveniently access Bioclim data. ArchGDAL is necessary to load in the Bioclim data.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters, GBIF2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RasterDataSources, ArchGDAL</span></span></code></pre></div><p>Load occurrences for the Mountain Pygmy Possum using GBIF.jl</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>records = GBIF2.occurrence_search(&quot;Burramys parvus&quot;; limit=300)</span></span></code></pre></div><h2 id="Get-Bioclimatic-variables" tabindex="-1">Get Bioclimatic variables <a class="header-anchor" href="#Get-Bioclimatic-variables" aria-label="Permalink to &quot;Get Bioclimatic variables {#Get-Bioclimatic-variables}&quot;">​</a></h2><p>Get BioClim layers and subset to south-east Australia. The first time this is run, this will automatically download and save the files.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RasterStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WorldClim{BioClim}, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">se_aus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">X</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">138</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 155</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Band</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌ 101×90 RasterStack ┐</span></span>
<span class="line"><span>├────────────────────┴─────────────────────────────────────────────────── dims ┐</span></span>
<span class="line"><span>  ↓ X Projected{Float64} 138.16666666666666:0.16666666666666666:154.83333333333331 ForwardOrdered Regular Intervals{Start},</span></span>
<span class="line"><span>  → Y Projected{Float64} -25.166666666666668:-0.16666666666666666:-40.0 ReverseOrdered Regular Intervals{Start}</span></span>
<span class="line"><span>├────────────────────────────────────────────────────────────────────── layers ┤</span></span>
<span class="line"><span>  :bio1  eltype: Float32 dims: X, Y size: 101×90</span></span>
<span class="line"><span>  :bio3  eltype: Float32 dims: X, Y size: 101×90</span></span>
<span class="line"><span>  :bio7  eltype: Float32 dims: X, Y size: 101×90</span></span>
<span class="line"><span>  :bio12 eltype: Float32 dims: X, Y size: 101×90</span></span>
<span class="line"><span>├────────────────────────────────────────────────────────────────────── raster ┤</span></span>
<span class="line"><span>  extent: Extent(X = (138.16666666666666, 154.99999999999997), Y = (-40.0, -25.0))</span></span>
<span class="line"><span>  missingval: -3.4f38</span></span>
<span class="line"><span>  crs: GEOGCS[&quot;WGS 84&quot;,DATUM[&quot;WGS_1984&quot;,SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563,AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]],AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]],PRIMEM[&quot;Greenwich&quot;,0,AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]],UNIT[&quot;degree&quot;,0.0174532925199433,AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]],AXIS[&quot;Latitude&quot;,NORTH],AXIS[&quot;Longitude&quot;,EAST],AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]]</span></span>
<span class="line"><span>└──────────────────────────────────────────────────────────────────────────────┘</span></span></code></pre></div><p>Plot BioClim predictors and scatter occurrence points on all subplots</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># The coordinates from the gbif table</span></span>
<span class="line"><span>coords = collect(skipmissing(records.geometry))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using CairoMakie</span></span>
<span class="line"><span>p = Rasters.rplot(se_aus);</span></span>
<span class="line"><span>for ax in p.content</span></span>
<span class="line"><span>    if ax isa Axis</span></span>
<span class="line"><span>        scatter!(ax, coords; alpha=0.5, marker=&#39;+&#39;, color=:black, markersize = 20)</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>p</span></span></code></pre></div><h2 id="Extract-bioclim-variables-at-occurrence-points" tabindex="-1">Extract bioclim variables at occurrence points <a class="header-anchor" href="#Extract-bioclim-variables-at-occurrence-points" aria-label="Permalink to &quot;Extract bioclim variables at occurrence points {#Extract-bioclim-variables-at-occurrence-points}&quot;">​</a></h2><p>Then extract predictor variables and write to CSV. Use the skipmissing keyword to exclude both missing coordinates and coordinates with missing values in the RasterStack.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using CSV</span></span>
<span class="line"><span>presences = extract(se_aus, coords, skipmissing = true)</span></span>
<span class="line"><span>CSV.write(&quot;burramys_parvus_predictors.csv&quot;, presences)</span></span></code></pre></div><p>Or convert them to a <code>DataFrame</code>:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using DataFrames</span></span>
<span class="line"><span>df = DataFrame(presences)</span></span>
<span class="line"><span>df[1:5,:]</span></span></code></pre></div><h2 id="Sample-background-points" tabindex="-1">Sample background points <a class="header-anchor" href="#Sample-background-points" aria-label="Permalink to &quot;Sample background points {#Sample-background-points}&quot;">​</a></h2><p>Next, sample random background points in the Raster. Rasters has a StatsBase extension to make this very straightforward. The syntax and output of <code>Rasters.sample</code> is very similar to that of <code>extract</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">background </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rasters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(se_aus, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, skipmissing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>500-element Vector{@NamedTuple{geometry::Tuple{Float64, Float64}, bio1::Float32, bio3::Float32, bio7::Float32, bio12::Float32}}:</span></span>
<span class="line"><span> (geometry = (150.99999999999997, -33.0), bio1 = 16.571041, bio3 = 48.53602, bio7 = 22.430248, bio12 = 860.0)</span></span>
<span class="line"><span> (geometry = (142.66666666666666, -31.0), bio1 = 19.576906, bio3 = 45.107285, bio7 = 30.526249, bio12 = 242.0)</span></span>
<span class="line"><span> (geometry = (142.33333333333331, -37.333333333333336), bio1 = 12.489927, bio3 = 47.655006, bio7 = 22.039001, bio12 = 734.0)</span></span>
<span class="line"><span> (geometry = (139.16666666666666, -32.0), bio1 = 18.085657, bio3 = 48.051502, bio7 = 29.53875, bio12 = 260.0)</span></span>
<span class="line"><span> (geometry = (151.16666666666666, -29.666666666666668), bio1 = 16.135437, bio3 = 50.043823, bio7 = 27.478, bio12 = 803.0)</span></span>
<span class="line"><span> (geometry = (147.66666666666666, -34.5), bio1 = 15.7665205, bio3 = 46.692066, bio7 = 29.3285, bio12 = 523.0)</span></span>
<span class="line"><span> (geometry = (143.99999999999997, -29.333333333333332), bio1 = 20.76074, bio3 = 42.31359, bio7 = 30.625748, bio12 = 303.0)</span></span>
<span class="line"><span> (geometry = (147.49999999999997, -26.333333333333332), bio1 = 19.201355, bio3 = 49.39211, bio7 = 30.905998, bio12 = 564.0)</span></span>
<span class="line"><span> (geometry = (150.16666666666666, -25.5), bio1 = 20.132782, bio3 = 49.636448, bio7 = 25.712498, bio12 = 660.0)</span></span>
<span class="line"><span> (geometry = (143.99999999999997, -35.0), bio1 = 16.997261, bio3 = 48.109383, bio7 = 28.83425, bio12 = 334.0)</span></span>
<span class="line"><span> ⋮</span></span>
<span class="line"><span> (geometry = (148.83333333333331, -31.5), bio1 = 16.528084, bio3 = 48.420208, bio7 = 29.6505, bio12 = 711.0)</span></span>
<span class="line"><span> (geometry = (151.33333333333331, -31.0), bio1 = 12.84801, bio3 = 50.523666, bio7 = 26.977251, bio12 = 814.0)</span></span>
<span class="line"><span> (geometry = (140.83333333333331, -38.166666666666664), bio1 = 13.922814, bio3 = 51.261326, bio7 = 17.491802, bio12 = 789.0)</span></span>
<span class="line"><span> (geometry = (138.99999999999997, -31.0), bio1 = 18.61449, bio3 = 46.90233, bio7 = 30.646, bio12 = 225.0)</span></span>
<span class="line"><span> (geometry = (146.83333333333331, -37.166666666666664), bio1 = 9.716656, bio3 = 41.55079, bio7 = 22.887001, bio12 = 1168.0)</span></span>
<span class="line"><span> (geometry = (147.33333333333331, -29.666666666666668), bio1 = 20.36797, bio3 = 46.822502, bio7 = 30.94875, bio12 = 417.0)</span></span>
<span class="line"><span> (geometry = (138.83333333333331, -28.0), bio1 = 21.936281, bio3 = 44.746014, bio7 = 32.305252, bio12 = 140.0)</span></span>
<span class="line"><span> (geometry = (138.66666666666666, -30.666666666666668), bio1 = 17.235178, bio3 = 44.174583, bio7 = 29.64775, bio12 = 269.0)</span></span>
<span class="line"><span> (geometry = (149.83333333333331, -30.833333333333332), bio1 = 18.296125, bio3 = 48.402348, bio7 = 29.439, bio12 = 640.0)</span></span></code></pre></div><h2 id="Fit-a-statistical-ensemble" tabindex="-1">Fit a statistical ensemble <a class="header-anchor" href="#Fit-a-statistical-ensemble" aria-label="Permalink to &quot;Fit a statistical ensemble {#Fit-a-statistical-ensemble}&quot;">​</a></h2><p>In this example, we will <a href="https://github.com/tiemvanderdeure/SpeciesDistributionModels.jl" target="_blank" rel="noreferrer">SpeciesDistributionModels.jl</a> to fit a statistical ensemble to the occurrence and background data.</p><p>First we need to load the models. SDM.jl integrates with MLJ - see the <a href="https://juliaai.github.io/MLJ.jl/dev/model_browser/#Classification" target="_blank" rel="noreferrer">model browser</a> for what models are available.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Maxnet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MaxnetBinaryClassifier</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MLJGLMInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinearBinaryClassifier</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># define the models in the ensemble</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">models </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxnet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MaxnetBinaryClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxnet2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MaxnetBinaryClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(features </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    glm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LinearBinaryClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(maxnet = Maxnet.MaxnetBinaryClassifier(&quot;&quot;, 1.0, Maxnet.default_regularization, true, 50, 100.0, GLM.CloglogLink(), false, Base.Pairs{Symbol, Union{}, Tuple{}, @NamedTuple{}}()), maxnet2 = Maxnet.MaxnetBinaryClassifier(&quot;lq&quot;, 1.0, Maxnet.default_regularization, true, 50, 100.0, GLM.CloglogLink(), false, Base.Pairs{Symbol, Union{}, Tuple{}, @NamedTuple{}}()), glm = MLJGLMInterface.LinearBinaryClassifier(true, GLM.LogitLink(), nothing, 30, 1.0e-6, 1.0e-6, 0.001, [:deviance, :dof_residual, :stderror, :vcov, :coef_table]))</span></span></code></pre></div><p>Next, format the data using <code>sdmdata</code>. To test how rigurous our models are, we will use 3-fold cross-validation.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using SpeciesDistributionModels</span></span>
<span class="line"><span>const SDM = SpeciesDistributionModels</span></span>
<span class="line"><span>data = sdmdata(presences, background; resampler = CV(; nfolds = 3))</span></span></code></pre></div><p>Now, fit the ensemble, passing the data object and the <code>NamedTuple</code> of models!</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ensemble = sdm(data, models)</span></span></code></pre></div><p>Use SDM.jl&#39;s evaluate function to see how this ensemble performs.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SDM.evaluate(ensemble)</span></span></code></pre></div><p>Not too bad!</p><h2 id="Make-predictions-of-climatic-suitability" tabindex="-1">Make predictions of climatic suitability <a class="header-anchor" href="#Make-predictions-of-climatic-suitability" aria-label="Permalink to &quot;Make predictions of climatic suitability {#Make-predictions-of-climatic-suitability}&quot;">​</a></h2><p>Use the ensemble to</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>suitability = SDM.predict(ensemble, se_aus, reducer = mean)</span></span></code></pre></div><p>And let&#39;s see what that looks like</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>plot(suitability, colorrange = (0,1))</span></span></code></pre></div>`,40)]))}const u=a(t,[["render",l]]);export{k as __pageData,u as default};
